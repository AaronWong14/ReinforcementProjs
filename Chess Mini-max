{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Chess Mini-max","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNrTHkrLru1k1yJTINj1Fv2"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"rzrZUhXPM6LG","colab_type":"code","colab":{}},"source":["# # Load the Drive helper and mount\n","# from google.colab import drive\n","\n","# # This will prompt for authorization.\n","# drive.mount('/content/drive')\n","# #drive.mount(\"/content/drive\", force_remount=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UjzAu3cYsNN5","colab_type":"code","outputId":"49293b11-b3f1-49d2-8596-6e31985af37b","executionInfo":{"status":"ok","timestamp":1588060989434,"user_tz":420,"elapsed":3846,"user":{"displayName":"Aaron Wong","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiS9mCZyE463_E_8tYQyoLyZY7HPjP2KsUJDdWjQ=s64","userId":"04748882517196628077"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["! pip install python-chess"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: python-chess in /usr/local/lib/python3.6/dist-packages (0.23.11)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"J6VeQ64IsGA0","colab_type":"code","colab":{}},"source":["import chess\n","import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1907WFshsRzY","colab_type":"code","colab":{}},"source":["board = chess.Board()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NSslXdUa3RFO","colab_type":"code","colab":{}},"source":["board.push(chess.Move.from_uci(\"e2e4\")) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RpD0EhRNwbEt","colab_type":"code","outputId":"d7b5edf0-1794-4f03-a20a-91c8c9f7705f","executionInfo":{"status":"ok","timestamp":1588060989635,"user_tz":420,"elapsed":3986,"user":{"displayName":"Aaron Wong","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiS9mCZyE463_E_8tYQyoLyZY7HPjP2KsUJDdWjQ=s64","userId":"04748882517196628077"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["board.legal_moves "],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<LegalMoveGenerator at 0x7f301d2876a0 (Nh6, Nf6, Nc6, Na6, h6, g6, f6, e6, d6, c6, b6, a6, h5, g5, f5, e5, d5, c5, b5, a5)>"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"AA_vjCKpwpPM","colab_type":"code","outputId":"5d38a591-aa9c-4d51-913f-0726db56128c","executionInfo":{"status":"ok","timestamp":1588060989636,"user_tz":420,"elapsed":3967,"user":{"displayName":"Aaron Wong","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiS9mCZyE463_E_8tYQyoLyZY7HPjP2KsUJDdWjQ=s64","userId":"04748882517196628077"}},"colab":{"base_uri":"https://localhost:8080/","height":421}},"source":["board"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Board('rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq - 0 1')"],"image/svg+xml":"<svg height=\"400\" version=\"1.1\" viewBox=\"0 0 400 400\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><g class=\"white pawn\" id=\"white-pawn\"><path d=\"M22 9c-2.21 0-4 1.79-4 4 0 .89.29 1.71.78 2.38-1.95 1.12-3.28 3.21-3.28 5.62 0 2.03.94 3.84 2.41 5.03-3 1.06-7.41 5.55-7.41 13.47h23c0-7.92-4.41-12.41-7.41-13.47 1.47-1.19 2.41-3 2.41-5.03 0-2.41-1.33-4.5-3.28-5.62.49-.67.78-1.49.78-2.38 0-2.21-1.79-4-4-4z\" fill=\"#fff\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"1.5\" /></g><g class=\"white knight\" fill=\"none\" fill-rule=\"evenodd\" id=\"white-knight\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#ffffff; stroke:#000000;\" /><path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#ffffff; stroke:#000000;\" /><path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#000000; stroke:#000000;\" /><path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" style=\"fill:#000000; stroke:#000000;\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" /></g><g class=\"white bishop\" fill=\"none\" fill-rule=\"evenodd\" id=\"white-bishop\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><g fill=\"#fff\" stroke-linecap=\"butt\"><path d=\"M9 36c3.39-.97 10.11.43 13.5-2 3.39 2.43 10.11 1.03 13.5 2 0 0 1.65.54 3 2-.68.97-1.65.99-3 .5-3.39-.97-10.11.46-13.5-1-3.39 1.46-10.11.03-13.5 1-1.354.49-2.323.47-3-.5 1.354-1.94 3-2 3-2zM15 32c2.5 2.5 12.5 2.5 15 0 .5-1.5 0-2 0-2 0-2.5-2.5-4-2.5-4 5.5-1.5 6-11.5-5-15.5-11 4-10.5 14-5 15.5 0 0-2.5 1.5-2.5 4 0 0-.5.5 0 2zM25 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 1 1 5 0z\" /></g><path d=\"M17.5 26h10M15 30h15m-7.5-14.5v5M20 18h5\" stroke-linejoin=\"miter\" /></g><g class=\"white rook\" fill=\"#fff\" fill-rule=\"evenodd\" id=\"white-rook\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M9 39h27v-3H9v3zM12 36v-4h21v4H12zM11 14V9h4v2h5V9h5v2h5V9h4v5\" stroke-linecap=\"butt\" /><path d=\"M34 14l-3 3H14l-3-3\" /><path d=\"M31 17v12.5H14V17\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M31 29.5l1.5 2.5h-20l1.5-2.5\" /><path d=\"M11 14h23\" fill=\"none\" stroke-linejoin=\"miter\" /></g><g class=\"white queen\" fill=\"#fff\" fill-rule=\"evenodd\" id=\"white-queen\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M8 12a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM24.5 7.5a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM41 12a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM16 8.5a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM33 9a2 2 0 1 1-4 0 2 2 0 1 1 4 0z\" /><path d=\"M9 26c8.5-1.5 21-1.5 27 0l2-12-7 11V11l-5.5 13.5-3-15-3 15-5.5-14V25L7 14l2 12zM9 26c0 2 1.5 2 2.5 4 1 1.5 1 1 .5 3.5-1.5 1-1.5 2.5-1.5 2.5-1.5 1.5.5 2.5.5 2.5 6.5 1 16.5 1 23 0 0 0 1.5-1 0-2.5 0 0 .5-1.5-1-2.5-.5-2.5-.5-2 .5-3.5 1-2 2.5-2 2.5-4-8.5-1.5-18.5-1.5-27 0z\" stroke-linecap=\"butt\" /><path d=\"M11.5 30c3.5-1 18.5-1 22 0M12 33.5c6-1 15-1 21 0\" fill=\"none\" /></g><g class=\"white king\" fill=\"none\" fill-rule=\"evenodd\" id=\"white-king\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M22.5 11.63V6M20 8h5\" stroke-linejoin=\"miter\" /><path d=\"M22.5 25s4.5-7.5 3-10.5c0 0-1-2.5-3-2.5s-3 2.5-3 2.5c-1.5 3 3 10.5 3 10.5\" fill=\"#fff\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M11.5 37c5.5 3.5 15.5 3.5 21 0v-7s9-4.5 6-10.5c-4-6.5-13.5-3.5-16 4V27v-3.5c-3.5-7.5-13-10.5-16-4-3 6 5 10 5 10V37z\" fill=\"#fff\" /><path d=\"M11.5 30c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0\" /></g><g class=\"black pawn\" id=\"black-pawn\"><path d=\"M22 9c-2.21 0-4 1.79-4 4 0 .89.29 1.71.78 2.38-1.95 1.12-3.28 3.21-3.28 5.62 0 2.03.94 3.84 2.41 5.03-3 1.06-7.41 5.55-7.41 13.47h23c0-7.92-4.41-12.41-7.41-13.47 1.47-1.19 2.41-3 2.41-5.03 0-2.41-1.33-4.5-3.28-5.62.49-.67.78-1.49.78-2.38 0-2.21-1.79-4-4-4z\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"1.5\" /></g><g class=\"black knight\" fill=\"none\" fill-rule=\"evenodd\" id=\"black-knight\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#000000; stroke:#000000;\" /><path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#000000; stroke:#000000;\" /><path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#ececec; stroke:#ececec;\" /><path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" style=\"fill:#ececec; stroke:#ececec;\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" /><path d=\"M 24.55,10.4 L 24.1,11.85 L 24.6,12 C 27.75,13 30.25,14.49 32.5,18.75 C 34.75,23.01 35.75,29.06 35.25,39 L 35.2,39.5 L 37.45,39.5 L 37.5,39 C 38,28.94 36.62,22.15 34.25,17.66 C 31.88,13.17 28.46,11.02 25.06,10.5 L 24.55,10.4 z \" style=\"fill:#ececec; stroke:none;\" /></g><g class=\"black bishop\" fill=\"none\" fill-rule=\"evenodd\" id=\"black-bishop\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M9 36c3.39-.97 10.11.43 13.5-2 3.39 2.43 10.11 1.03 13.5 2 0 0 1.65.54 3 2-.68.97-1.65.99-3 .5-3.39-.97-10.11.46-13.5-1-3.39 1.46-10.11.03-13.5 1-1.354.49-2.323.47-3-.5 1.354-1.94 3-2 3-2zm6-4c2.5 2.5 12.5 2.5 15 0 .5-1.5 0-2 0-2 0-2.5-2.5-4-2.5-4 5.5-1.5 6-11.5-5-15.5-11 4-10.5 14-5 15.5 0 0-2.5 1.5-2.5 4 0 0-.5.5 0 2zM25 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 1 1 5 0z\" fill=\"#000\" stroke-linecap=\"butt\" /><path d=\"M17.5 26h10M15 30h15m-7.5-14.5v5M20 18h5\" stroke=\"#fff\" stroke-linejoin=\"miter\" /></g><g class=\"black rook\" fill=\"#000\" fill-rule=\"evenodd\" id=\"black-rook\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M9 39h27v-3H9v3zM12.5 32l1.5-2.5h17l1.5 2.5h-20zM12 36v-4h21v4H12z\" stroke-linecap=\"butt\" /><path d=\"M14 29.5v-13h17v13H14z\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M14 16.5L11 14h23l-3 2.5H14zM11 14V9h4v2h5V9h5v2h5V9h4v5H11z\" stroke-linecap=\"butt\" /><path d=\"M12 35.5h21M13 31.5h19M14 29.5h17M14 16.5h17M11 14h23\" fill=\"none\" stroke=\"#fff\" stroke-linejoin=\"miter\" stroke-width=\"1\" /></g><g class=\"black queen\" fill=\"#000\" fill-rule=\"evenodd\" id=\"black-queen\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><g fill=\"#000\" stroke=\"none\"><circle cx=\"6\" cy=\"12\" r=\"2.75\" /><circle cx=\"14\" cy=\"9\" r=\"2.75\" /><circle cx=\"22.5\" cy=\"8\" r=\"2.75\" /><circle cx=\"31\" cy=\"9\" r=\"2.75\" /><circle cx=\"39\" cy=\"12\" r=\"2.75\" /></g><path d=\"M9 26c8.5-1.5 21-1.5 27 0l2.5-12.5L31 25l-.3-14.1-5.2 13.6-3-14.5-3 14.5-5.2-13.6L14 25 6.5 13.5 9 26zM9 26c0 2 1.5 2 2.5 4 1 1.5 1 1 .5 3.5-1.5 1-1.5 2.5-1.5 2.5-1.5 1.5.5 2.5.5 2.5 6.5 1 16.5 1 23 0 0 0 1.5-1 0-2.5 0 0 .5-1.5-1-2.5-.5-2.5-.5-2 .5-3.5 1-2 2.5-2 2.5-4-8.5-1.5-18.5-1.5-27 0z\" stroke-linecap=\"butt\" /><path d=\"M11 38.5a35 35 1 0 0 23 0\" fill=\"none\" stroke-linecap=\"butt\" /><path d=\"M11 29a35 35 1 0 1 23 0M12.5 31.5h20M11.5 34.5a35 35 1 0 0 22 0M10.5 37.5a35 35 1 0 0 24 0\" fill=\"none\" stroke=\"#fff\" /></g><g class=\"black king\" fill=\"none\" fill-rule=\"evenodd\" id=\"black-king\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M22.5 11.63V6\" stroke-linejoin=\"miter\" /><path d=\"M22.5 25s4.5-7.5 3-10.5c0 0-1-2.5-3-2.5s-3 2.5-3 2.5c-1.5 3 3 10.5 3 10.5\" fill=\"#000\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M11.5 37c5.5 3.5 15.5 3.5 21 0v-7s9-4.5 6-10.5c-4-6.5-13.5-3.5-16 4V27v-3.5c-3.5-7.5-13-10.5-16-4-3 6 5 10 5 10V37z\" fill=\"#000\" /><path d=\"M20 8h5\" stroke-linejoin=\"miter\" /><path d=\"M32 29.5s8.5-4 6.03-9.65C34.15 14 25 18 22.5 24.5l.01 2.1-.01-2.1C20 18 9.906 14 6.997 19.85c-2.497 5.65 4.853 9 4.853 9M11.5 30c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0\" stroke=\"#fff\" /></g></defs><rect class=\"square dark a1\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"335\" /><use transform=\"translate(20, 335)\" xlink:href=\"#white-rook\" /><rect class=\"square light b1\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"335\" /><use transform=\"translate(65, 335)\" xlink:href=\"#white-knight\" /><rect class=\"square dark c1\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"335\" /><use transform=\"translate(110, 335)\" xlink:href=\"#white-bishop\" /><rect class=\"square light d1\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"335\" /><use transform=\"translate(155, 335)\" xlink:href=\"#white-queen\" /><rect class=\"square dark e1\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"335\" /><use transform=\"translate(200, 335)\" xlink:href=\"#white-king\" /><rect class=\"square light f1\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"335\" /><use transform=\"translate(245, 335)\" xlink:href=\"#white-bishop\" /><rect class=\"square dark g1\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"335\" /><use transform=\"translate(290, 335)\" xlink:href=\"#white-knight\" /><rect class=\"square light h1\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"335\" /><use transform=\"translate(335, 335)\" xlink:href=\"#white-rook\" /><rect class=\"square light a2\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"290\" /><use transform=\"translate(20, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square dark b2\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"290\" /><use transform=\"translate(65, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square light c2\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"290\" /><use transform=\"translate(110, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square dark d2\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"290\" /><use transform=\"translate(155, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square light lastmove e2\" fill=\"#cdd16a\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"290\" /><rect class=\"square dark f2\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"290\" /><use transform=\"translate(245, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square light g2\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"290\" /><use transform=\"translate(290, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square dark h2\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"290\" /><use transform=\"translate(335, 290)\" xlink:href=\"#white-pawn\" /><rect class=\"square dark a3\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"245\" /><rect class=\"square light b3\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"245\" /><rect class=\"square dark c3\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"245\" /><rect class=\"square light d3\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"245\" /><rect class=\"square dark e3\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"245\" /><rect class=\"square light f3\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"245\" /><rect class=\"square dark g3\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"245\" /><rect class=\"square light h3\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"245\" /><rect class=\"square light a4\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"200\" /><rect class=\"square dark b4\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"200\" /><rect class=\"square light c4\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"200\" /><rect class=\"square dark d4\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"200\" /><rect class=\"square light lastmove e4\" fill=\"#cdd16a\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"200\" /><use transform=\"translate(200, 200)\" xlink:href=\"#white-pawn\" /><rect class=\"square dark f4\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"200\" /><rect class=\"square light g4\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"200\" /><rect class=\"square dark h4\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"200\" /><rect class=\"square dark a5\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"155\" /><rect class=\"square light b5\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"155\" /><rect class=\"square dark c5\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"155\" /><rect class=\"square light d5\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"155\" /><rect class=\"square dark e5\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"155\" /><rect class=\"square light f5\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"155\" /><rect class=\"square dark g5\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"155\" /><rect class=\"square light h5\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"155\" /><rect class=\"square light a6\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"110\" /><rect class=\"square dark b6\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"110\" /><rect class=\"square light c6\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"110\" /><rect class=\"square dark d6\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"110\" /><rect class=\"square light e6\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"110\" /><rect class=\"square dark f6\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"110\" /><rect class=\"square light g6\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"110\" /><rect class=\"square dark h6\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"110\" /><rect class=\"square dark a7\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"65\" /><use transform=\"translate(20, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square light b7\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"65\" /><use transform=\"translate(65, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square dark c7\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"65\" /><use transform=\"translate(110, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square light d7\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"65\" /><use transform=\"translate(155, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square dark e7\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"65\" /><use transform=\"translate(200, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square light f7\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"65\" /><use transform=\"translate(245, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square dark g7\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"65\" /><use transform=\"translate(290, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square light h7\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"65\" /><use transform=\"translate(335, 65)\" xlink:href=\"#black-pawn\" /><rect class=\"square light a8\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"20\" y=\"20\" /><use transform=\"translate(20, 20)\" xlink:href=\"#black-rook\" /><rect class=\"square dark b8\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"65\" y=\"20\" /><use transform=\"translate(65, 20)\" xlink:href=\"#black-knight\" /><rect class=\"square light c8\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"110\" y=\"20\" /><use transform=\"translate(110, 20)\" xlink:href=\"#black-bishop\" /><rect class=\"square dark d8\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"155\" y=\"20\" /><use transform=\"translate(155, 20)\" xlink:href=\"#black-queen\" /><rect class=\"square light e8\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"200\" y=\"20\" /><use transform=\"translate(200, 20)\" xlink:href=\"#black-king\" /><rect class=\"square dark f8\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"245\" y=\"20\" /><use transform=\"translate(245, 20)\" xlink:href=\"#black-bishop\" /><rect class=\"square light g8\" fill=\"#ffce9e\" height=\"45\" stroke=\"none\" width=\"45\" x=\"290\" y=\"20\" /><use transform=\"translate(290, 20)\" xlink:href=\"#black-knight\" /><rect class=\"square dark h8\" fill=\"#d18b47\" height=\"45\" stroke=\"none\" width=\"45\" x=\"335\" y=\"20\" /><use transform=\"translate(335, 20)\" xlink:href=\"#black-rook\" /><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"42\" y=\"10\">a</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"42\" y=\"390\">a</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"87\" y=\"10\">b</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"87\" y=\"390\">b</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"132\" y=\"10\">c</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"132\" y=\"390\">c</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"177\" y=\"10\">d</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"177\" y=\"390\">d</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"222\" y=\"10\">e</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"222\" y=\"390\">e</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"267\" y=\"10\">f</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"267\" y=\"390\">f</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"312\" y=\"10\">g</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"312\" y=\"390\">g</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"357\" y=\"10\">h</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"357\" y=\"390\">h</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"357\">1</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"357\">1</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"312\">2</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"312\">2</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"267\">3</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"267\">3</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"222\">4</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"222\">4</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"177\">5</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"177\">5</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"132\">6</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"132\">6</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"87\">7</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"87\">7</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"10\" y=\"42\">8</text><text alignment-baseline=\"middle\" font-size=\"14\" text-anchor=\"middle\" x=\"390\" y=\"42\">8</text></svg>"},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"QN3p6EJ7wlVs","colab_type":"code","outputId":"3fd31777-26b5-4a5b-e856-66b532240b12","executionInfo":{"status":"ok","timestamp":1588060989637,"user_tz":420,"elapsed":3947,"user":{"displayName":"Aaron Wong","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiS9mCZyE463_E_8tYQyoLyZY7HPjP2KsUJDdWjQ=s64","userId":"04748882517196628077"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["chess.Move.from_uci(\"a8a1\") in board.legal_moves"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"fdngFr0hM4bg","colab_type":"code","colab":{}},"source":["# general weights for the pieces - will be added or subtracted depending on the evaluation color\n","pieces_weights = {'P': 10, 'N': 30, 'B': 30, 'R': 50, 'Q': 90, 'K': 900, 'p': 10, 'n': 30, 'b': 30, 'r': 50, 'q': 90, 'k': 900 }"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tCaN0NawqYYY","colab_type":"code","colab":{}},"source":["file_rank = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7} "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vgm4feR2AOMG","colab_type":"code","colab":{}},"source":["# starting weights for the pieces\n","pawnEvalWhite = \\\n","    [\n","        [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],\n","        [5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],\n","        [1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],\n","        [0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],\n","        [0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],\n","        [0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],\n","        [0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5],\n","        [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]\n","    ];\n","\n","pawnEvalBlack = list(reversed(pawnEvalWhite))\n","\n","\n","knightEvalWhite = \\\n","    [\n","        [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n","        [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],\n","        [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],\n","        [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],\n","        [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],\n","        [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],\n","        [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],\n","        [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]\n","    ]\n","\n","knightEvalBlack = list(reversed(knightEvalWhite))\n","\n","\n","bishopEvalWhite = \\\n","  [\n","      [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n","      [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\n","      [ -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],\n","      [ -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],\n","      [ -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],\n","      [ -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],\n","      [ -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],\n","      [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]\n","  ]\n","\n","bishopEvalBlack = list(reversed(bishopEvalWhite))\n","\n","rookEvalWhite = \\\n","  [\n","      [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],\n","      [  0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],\n","      [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n","      [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n","      [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n","      [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n","      [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n","      [  0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0]\n","  ]\n","\n","rookEvalBlack = list(reversed(rookEvalWhite))\n","\n","\n","queenEvalWhite = \\\n","  [\n","      [ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n","      [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\n","      [ -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\n","      [ -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\n","      [  0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\n","      [ -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\n","      [ -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],\n","      [ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]\n","  ]\n","\n","queenEvalBlack = list(reversed(queenEvalWhite))\n","\n","\n","kingEvalWhite = \\\n","  [\n","      [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n","      [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n","      [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n","      [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n","      [ -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\n","      [ -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\n","      [  2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ],\n","      [  2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0 ]\n","  ]\n","\n","kingEvalBlack = list(reversed(kingEvalWhite))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YOnLCxSxm5tN","colab_type":"code","colab":{}},"source":["def miniMaxRoot(board, depth, turn):\n","  '''\n","  Minimax root function to set the current turn and depth parameter. For the\n","  move, we want to return the top of the list move\n","\n","  Params:\n","  board: the current state of the board\n","  depth: how deep minimax tree should be -1\n","  turn: either 'W' for white or 'B' for black\n","  '''\n","\n","  # start off turn variables (White's move if True, else Black's move)\n","  board.turn = chess.WHITE if turn =='W' else chess.BLACK\n","  turn = board.turn\n","  legalMoves = board.legal_moves\n","  colorEval = 'W' if chess.WHITE else 'B'\n","  alpha = -10000000\n","  beta = 10000000\n","  isMaximizing = True\n","  bestWeight = -10000000\n","  bestMove = None\n","  for move in legalMoves:\n","    copyBoard = board.copy()\n","    copyBoard.turn = board.turn\n","    sampleMove = chess.Move.from_uci(str(move))\n","    copyBoard.push(sampleMove) \n","    currWeight = miniMax(copyBoard, move, depth - 1, turn, colorEval, alpha, beta, not isMaximizing)\n","    \n","    if currWeight > bestWeight:\n","      bestMove = move\n","      bestWeight = currWeight\n","    # print((move, currWeight))\n","  return bestMove"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hHzs9j-rAD4M","colab_type":"code","colab":{}},"source":["def miniMax(board, currMove, depth, turn, colorEval, alpha, beta, isMaximizing):\n","  '''\n","  Minimax helper function to travel down recursion tree and calculate the \n","  tree of possible moves given a single move\n","\n","  Params:\n","  board: the current board (will be updated at each step)\n","  currMove: current move down the tree\n","  depth: how many more depths needed to compute calculations\n","  turn: either 'W' for white or 'B' for black\n","  colorEval: which weights to apply depending if black or white\n","  '''\n","  # main computation with minimax using recursion\n","  \n","  # base case: when maxDepth is reached, return the weights of the moves\n","  #print(currDepth, maxDepth)\n","\n","  # print(board)\n","  if depth == 0:\n","    # print(board)\n","    # print(calcMoveWeights(board, colorEval))\n","    return calcMoveWeights(board, colorEval)\n","  \n","  # recursive step to build tree of possible moves and choosing what move based\n","  # on if maximizing or minimizing tree\n","  else:\n","    legalMoves = board.legal_moves\n","    turn = chess.BLACK if chess.WHITE else chess.WHITE\n","    if isMaximizing:\n","      alpha = -10000000\n","      bestWeight = -10000000\n","      for move in legalMoves:\n","        copyBoard = board.copy()\n","        copyBoard.turn = board.turn\n","        sampleMove = chess.Move.from_uci(str(move))\n","        copyBoard.push(sampleMove) \n","        bestWeight = max(bestWeight, miniMax(copyBoard, move, depth - 1, turn, colorEval, alpha, beta, not isMaximizing))\n","        alpha = max(alpha, bestWeight)\n","\n","        if beta <= alpha:\n","          return bestWeight\n","      return bestWeight\n","\n","    else:\n","      beta = 10000000\n","      bestWeight = 10000000\n","      for move in legalMoves:\n","        copyBoard = board.copy()\n","        copyBoard.turn = board.turn\n","        sampleMove = chess.Move.from_uci(str(move))\n","        copyBoard.push(sampleMove)\n","        bestWeight = min(bestWeight, miniMax(copyBoard, move, depth - 1, turn, colorEval, alpha, beta, not isMaximizing))\n","        beta = min(beta, bestWeight)\n","\n","        if beta <= alpha:\n","          return bestWeight\n","      return bestWeight\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5sB0CFVu9ui3","colab_type":"code","colab":{}},"source":["def calcMoveWeights(board, colorEval):\n","  '''\n","  Function to calculate the weight of the current board positions\n","\n","  Parameters:\n","  Board: current state of the board\n","  Turn: True if white's turn, False for black's turn\n","\n","  Procedure:\n","\n","  '''\n","\n","  boardPosition = board.piece_map()\n","  # print(boardFen, boardPosition)\n","  # print(board)\n","  # print(move)\n","  weight = 0 \n","  # boardPosition.keys() returns all squares numbered 0 to 63 and the piece that\n","  # occupy the square if any\n","\n","  for key in boardPosition.keys():\n","    piece = str(boardPosition[key])\n","\n","    # get the corresponding squre to eval positions\n","    square_rank = chess.square_rank(key)\n","    square_file = 7 - chess.square_file(key)\n","    # print(square_rank, square_file)\n","\n","    # if statements to check piece to add the eval positions\n","    # to correspond to board position weight, calculate [file, rank] ->\n","    # [row, col]\n","    if colorEval == 'B':\n","      if piece == 'p':\n","        weight += pawnEvalBlack[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'b':\n","        weight += bishopEvalBlack[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'n':\n","        weight += knightEvalBlack[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'r':\n","        weight += rookEvalBlack[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'q':\n","        weight += queenEvalBlack[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'k':\n","        weight += kingEvalBlack[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'P':\n","        weight -= pawnEvalWhite[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'B':\n","        weight -= bishopEvalWhite[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'N':\n","        weight -= knightEvalWhite[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'R':\n","        weight -= rookEvalWhite[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'Q':\n","        weight -= queenEvalWhite[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'K':\n","        weight -= kingEvalWhite[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","    else:\n","      if piece == 'P':\n","        weight += pawnEvalWhite[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'B':\n","        weight += bishopEvalWhite[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'N':\n","        weight += knightEvalWhite[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'R':\n","        weight += rookEvalWhite[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'Q':\n","        weight += queenEvalWhite[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'K':\n","        weight += kingEvalWhite[square_file][square_rank]\n","        weight += pieces_weights[piece]\n","      elif piece == 'p':\n","        weight -= pawnEvalBlack[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'b':\n","        weight -= bishopEvalBlack[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'n':\n","        weight -= knightEvalBlack[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'r':\n","        weight -= rookEvalBlack[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'q':\n","        weight -= queenEvalBlack[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","      elif piece == 'k':\n","        weight -= kingEvalBlack[square_file][square_rank]\n","        weight -= pieces_weights[piece]\n","\n","  return weight "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dE1jJcfQ8qeb","colab_type":"code","outputId":"06df5330-b9c3-43a1-d65c-0fdef64b8bed","executionInfo":{"status":"ok","timestamp":1588061407218,"user_tz":420,"elapsed":54694,"user":{"displayName":"Aaron Wong","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiS9mCZyE463_E_8tYQyoLyZY7HPjP2KsUJDdWjQ=s64","userId":"04748882517196628077"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["'''\n","This block of code is for testing the miniMax function\n","\n","Parameters (in order):\n","board: enter FEN of board\n","depth: number of moves in future to calculate\n","color: what color do you want algorithm to calculate for \n","'''\n","start = time.time()\n","boardString = 'r3kb1r/1ppb1pp1/3p1n1p/p3P3/4P3/2N3P1/PPP2PqP/RNBQK2R w KQkq - 1 11'\n","board = chess.Board(boardString)\n","print(miniMaxRoot(board, 4,'W'))\n","end = time.time() - start \n","print('Total Time {time}'.format(time = end))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["e1d2\n","Total Time 54.35695552825928\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3cGsbptkpLtn","colab_type":"code","outputId":"1fcc7105-63e8-48d5-ade1-3c2f865d6f98","executionInfo":{"status":"ok","timestamp":1588061007660,"user_tz":420,"elapsed":21857,"user":{"displayName":"Aaron Wong","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiiS9mCZyE463_E_8tYQyoLyZY7HPjP2KsUJDdWjQ=s64","userId":"04748882517196628077"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["testList = ['g8h6', 'g8f6', 'b8c6', 'b8a6', 'h7h6']\n","def split(data):\n","  if len(data) == 0:\n","      return data #trivial case, we have no element therefore we return empty list\n","  else: #if we have elements\n","      first_value = data[0] #we take the first value\n","      data = {first_value : split(data[1:])} #data[1:] will return a list with every value but the first value\n","      return data #this is called after the last recursion is called\n","\n","print(split(testList))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["{'g8h6': {'g8f6': {'b8c6': {'b8a6': {'h7h6': []}}}}}\n"],"name":"stdout"}]}]}